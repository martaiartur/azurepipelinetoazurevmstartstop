pool: 
  Default

steps:
# - script: echo Hello, world! # 0. Run anything - this was run OK
# plan: 1. run vm in Azure 
#   1A: best: with Powershell because i like it
#        powershell@azure pipeline still uses depreated AzureRM module instead of Az module, but commands should work similar way (tested at work)
#               Start-AzureRmVM -Name "ideArmoVM1" -ResourceGroupName "ideArmoResourceGroup"
- task: AzureCLI@2
  inputs:
    azureSubscription: "Azure subscription 1"
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az vm list --resource-group ideArmoResourceGroup --show-details | ConvertFrom-Json | Select-Object -Property name,resourceGroup,powerState
      az vm start --name "ideArmoVM1" --resource-group "ideArmoResourceGroup"
      az vm list --resource-group ideArmoResourceGroup --show-details | ConvertFrom-Json | Select-Object -Property name,resourceGroup,powerState
      # Get-AzVM   -Name "ideArmoVM1" -ResourceGroupName "ideArmoResourceGroup" -Status | Select-Object -property *
      # Start-AzVM -Name "ideArmoVM1" -ResourceGroupName "ideArmoResourceGroup"
      # Get-AzVM   -Name "ideArmoVM1" -ResourceGroupName "ideArmoResourceGroup" -Status | Select-Object -property *
#   1B: failover: by az command
# 2. stop (+deallocate) vm in Azure 
#               Stop-AzureRmVM -Name "ideArmoVM1" -ResourceGroupName "ideArmoResourceGroup" -StayProvisioned:$false -Force
# 3. monitor status of power state of vm (before and after power state change)
#               Get-AzureRmVM -Name "ideArmoVM1" -ResourceGroupName "ideArmoResourceGroup" -Status
#                     Select-Object -property Name,ResourceGroupName,?PowerState?
